apply plugin: 'com.android.application'

android {
	compileSdkVersion 22
	buildToolsVersion "22.0.1"

	defaultConfig {
		applicationId "jp.so_raseene.kaesu"
		versionCode 5
		versionName '1.11'
		minSdkVersion 9
		targetSdkVersion 22
		ndk {
			moduleName "native"
		}
	}

	signingConfigs {
		releaseKey {
			keyAlias System.getenv("KEYALIAS")
			keyPassword System.getenv("PASSWORD")
			storeFile file(System.getenv("KEYSTORE"))
			storePassword System.getenv("PASSWORD")
		}
	}
	buildTypes {
		debug {
			applicationIdSuffix = ".debug"
			versionNameSuffix = "d"
			debuggable true
			jniDebuggable true
		}
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
			debuggable false
			jniDebuggable false
			signingConfig signingConfigs.releaseKey
		}
	}
	sourceSets {
		main {
			jni.srcDirs = []
			jniLibs.srcDir "src/main/libs"
		}
	}
}

dependencies {
	compile 'com.android.support:support-v4:22.2.0'
	compile 'com.google.android.gms:play-services-ads:7.5.0'
	compile files('libs/appc_cloud_2.3.0.jar')
	compile files('libs/nendSDK-2.6.2.jar')
}


import org.apache.tools.ant.taskdefs.condition.Os

def getNdkFolder() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkdir = properties.getProperty('ndk.dir', null)
 
	if ( ndkdir == null ) {
		if ( System.env.ANDROID_NDK_ROOT != null ) {
			ndkdir = System.env.ANDROID_NDK_ROOT
 		}
		else if ( System.env.NDK_ROOT != null ) {
			ndkdir = System.env.NDK_ROOT
		}
		else if ( System.env.NDKROOT != null ) {
			ndkdir = System.env.NDKROOT
		}
 		else if ( System.env.NDK != null ) {
			ndkdir = System.env.NDK
		}
 		else {
			throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT/NDK_ROOT/NDKROOT/NDK environment variable.")
		}
	}
	if ( !ndkdir.endsWith('/') ) {
		ndkdir = ndkdir + File.separator;
	}
	return	ndkdir
}

task ndkBuild (type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	def ndkBuildingDir = getNdkFolder();
	def ndkBuildPath
	if ( Os.isFamily(Os.FAMILY_WINDOWS) ) {
		ndkBuildPath = ndkBuildingDir + 'ndk-build.cmd'
	}
	else {
		ndkBuildPath = ndkBuildingDir + 'ndk-build'
	}
	commandLine ndkBuildPath, '-j4', '-C', file('src/main').absolutePath
}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}
